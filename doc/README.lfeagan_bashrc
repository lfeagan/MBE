Title: README for Lance Feagan's Bash RC Files
Author: Lance Feagan
Electronic Mail: lfeagan@sf.net

0. Overview
This README is designed to help you take advantage of my .bashrc and associated files. Over a period of years I have worked to have a flexible, dynamic set of RC files that enable me to login to a variety of hosts with varying software configurations and have all tools work as expected with a minimum of fuss.

When you first invoke the bash shell (interactive), the .bash_profile is sourced. The first thing the .bash_profile will do is to source the .bashrc file. To complicate our lives slightly, some systems, most notably many Linux systems, have chosen to have /etc/profile source ~/.bashrc if it exists. Previously I had worked hard to code around this, but my current set of RC files archives key environment variables (PATH,LD_LIBRARY_PATH,MANPATH,INCLUDE) when initially run and algorithmically builds the rest of the path on top of the stored variables. Because it tests for the existence of my storage variables before archiving, it is able to avoid double-inclusion of a particular path element. This strategy is, on the whole, more resilient. If there were a larger number of variables needing archiving that changed on a regular basis, this approach would suffer from excessive maintenance. Seeing as only 4 variables need archiving, three of which have remained consistent for a period of over 20 years, I feel comfortable that maintenance of the archival strategy will be non-existent.


There are three files necessary when installing my RC files:
 (1) .bashrc,
 (2) .bash_aliases, and
 (3) .bash_profile


1. Usage

1.1 Path Variables
 The path variables are defined through a single call to buildpath that in turn call approximately 10 additional functions for setup of specific applications. When called, the buildpath functions recovers the archived path variables before calling the application-specific functions. This enables a solid platform upon which to build paths. The only disadvatage is when a user adds to a path variable manually through manipulation in the shell and subsequently invokes a function that calls buildpath the manually added path will no longer be part of a path variable. The application-specific functions encapsulate knowledge of the applicability of a particular program to a platform and/or the current installation. Examples of these functions include: setpath_java, setpath_opengl, setpath_rational, and setpath_informix. Although the setpath_ methods can be invoked diretly in the shell, it is not advisable to directly run them in such a manner. The buildpath function can be run safely, assuming the user finds it acceptable to have any manual modification of a path variable over-written. Nonetheless, a simple call to buildpath can be quite useful in refreshing the path variables if they have somehow become corrupt so long as the archived path variables (ORIG_*) have not been altered.

1.2 General Aliases/Functions
 There is an extensive set of functions and aliases present in the .bashrc and the .bash_aliases files. In general, any alias/function that is unrelated to the configuration of a path variable is present in .bash_aliases. Any function/alias that is involved direclty in configuration of a path variable should be located in .bashrc. If you find this not to be the case for any notable example(s), please notify me.

1.3 Informix
 There are two key external function used in running and accessing an IDS/CSDK installation. They are config_ids and config_csdk. At present config_ids supports three options, setting the server version, setting the build number, and setting the servername. The server version and build number are used to generate the INFORMIXDIR environment variable that points to a server installation directory. Based on the machine architecture, an environment variable that points to the repository for all IDS/CSDK installations (IFX_REPO) is constructed as:
 /usr3/informix_repo/${HOSTTYPE}
Using the environment variables IDS_VERSION and IDS_BUILDNUM along with config_ids the path to the server (IDS_PATH) is constructed as: 
 /${IFX_REPO}/IDS/${IDS_VERSION}/${IDS_BUILDNUM}
Using config_ids, the version, build number, and server name are specified as:
 config_ids -v <SERVER_VERSION> -b <BUILD_NUMBER> -s <SERVER_NAME>
Becuase of the nature of IDS & CSDK, use of either config_ids or config_csdk will over-write the key informix environment variables of the other. However, in either case the settings provided by the user will remain stored in the shell environment, ready for a rapid switch to/from IDS/CSDK by simply running config_ids or config_csdk again without the need to provide the options again.

1.4 Shell Prompt & LS_COLORS

1.5 Flag Usage Conventions
-c = Creator
-p = Product
-v = Version
-f = Fixpack

2. Caveat Emptor
 Others who attempt to build on my RC files should be very careful. Often times there are comments in the area surrounding a function which are very relevant to its implementation. I have tried to organize the text so that related functions are nearby. Although most functions stand alone and do not have any external dependencies on other functions, the informix ids/csdk functions are a notable exception to this rule. These functions make heavy use of shared information and as such careful study of all relevant code should be performed before modification is attempted. 


