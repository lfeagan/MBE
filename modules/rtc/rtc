#!/bin/bash
# vim: set tabstop=2 shiftwidth=2 autoindent smartindent:

#------------------------------------------------------------------------------
# Copyright 2009 Lance W. Feagan
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License. 
#------------------------------------------------------------------------------

###############################################################################
# Module: rtc
# Description:
# 	Defines ...
# 	nextline
###############################################################################

#
# Template for new module creation.
# Substitute the new module name for 'rtc'
# %s/rtc/newname/gc

__rtc_dependencies=( 'mbe' )
__rtc_functions=( '_rtc_load' '_rtc_unload' '_rtc_setpath' '_rtc_usage' '_rtc_loadWorkspace' '_rtc_complete' )

_rtc_load ()
{
	DEBUG echo "_rtc_load: enter"
	local module="rtc"

	# Load preferences
	
	# Configure module

	DEBUG echo "_rtc_load: leave"
}

_rtc_unload ()
{
	local func
	for func in "${__rtc_functions[@]}"; do
		unset "${func}"
	done
	return 0
}

_rtc_setpath ()
{

}

_rtc_usage ()
{

}

_rtc_complete()
{
	COMPREPLY=( )
	return 0
}

_rtc_config ()
{
	usage ()
	{
		echo "_rtc_config -c <Creator> -v <Version> -b <Bits>"
	}


	# Arguments
	# -b Bits
	# -c Creator
	# -h Print usage
	# -n Do not call buildpath
	# -q Quiet; do not print any messages
	# -v Version
	# parse arguments with getopts
	# reset getopts state variables
	unset bits creator version
	print_usage=0
	suppress_buildpath=0
	quiet=0
	while getopts "b:c:hnqv:" option
	do
		case $option in
			b  ) bits=$OPTARG;;
		  c  ) creator=$OPTARG;;
			h  ) print_usage=1;;
			n  ) suppress_buildpath=1;;
			q  ) quiet=1;;
			v  ) version=$OPTARG;;
			\? ) print_usage="1";;
			*  ) print_usage="1";;
		esac
	done
	OPTIND=1 # Reset OPTIND

	if [[ "$print_usage" == 1 ]]; then
		usage
		return 0
	fi

	version="${version-$JAVA_VERSION}"



	RTC_SCMTOOLS_DIR="/mnt/xfs0/software_repo/Linux/IBM/Rational/TeamConcert/2.0.0.1/jazz/scmtools/eclipse"
	RTC_TARGET_DIR="/tmp/Workspace_Derby"
	RTC_USERNAME="lfeagan@us.ibm.com"
	RTC_PASSWORD=""
	RTC_REPOSITORY_URI="https://lxrtc01.lenexa.ibm.com:9443/jazz"

	# Verify that requested change will succeed
	local maybe_rtc_scmtools_dir="${TOOLSPATH32}/scmtools"
	local maybe_java_home="$(java_buildjavahomestring ${bits} ${creator} ${version})"
	DEBUG echo "maybe_java_home=${maybe_java_home}"
	if [ -n "${maybe_java_home}" ]; then
		RTC_SCMTOOLS_DIR=""
		RTC_SCMTOOLS_VERSION="${version}"
		export JAVA_BITS JAVA_CREATOR JAVA_VERSION JAVA_HOME

		# Export variables
		if [[ "${suppress_buildpath}" != "1" ]]; then
			mbe_buildpath
		fi
	fi

}

_rtc_scmtools_buildpath ()
{

}

_rtc_listWorkspaces ()
{

}

_rtc_loadWorkspace ()
{

}

_rtc_scmtools_buildpath ()
{
	# Takes three arguments, JAVA_BITS, JAVA_CREATOR, and JAVA_VERSION and
	# creates the string to be used for JAVA_HOME
	if [[ -n "${1}" && -n "${2}" && -n "${3}" ]]; then
		local bits="${1}"
		local creator="${2}"
		local version="${3}"
		local maybe_java_home
		if [[ "${bits}" == 32 ]]; then
			maybe_java_home="${TOOLSPATH32}"
		elif [[ "${bits}" == 64 ]]; then
			maybe_java_home="${TOOLSPATH}"
		else
			echo ""
			return 1
		fi
		java_isValidCreator ${creator}
		if [[ "$?" == 1 ]]; then
			java_isValidVersion ${creator} ${version}
			if [[ "$?" == 1 ]]; then
				maybe_java_home="${maybe_java_home}/${java_javadir}/${creator}/${version}"
				if [[ -d "${maybe_java_home}" ]]; then
					echo "${maybe_java_home}"
				fi
			fi
		fi
	fi
	echo ""
	return 1
}

if [ -z "${1}" ]; then
	echo "Must specify a workspace name to be loaded."
	exit 1
else
	WORKSPACE_NAME="${1}"
fi

"${SCMTOOLS_DIR}/scm" load --all -d "${TARGET_DIR}" -f -i -u "${USERNAME}" -P "${PASSWORD}" -r "${REPOSITORY_URI}" "${WORKSPACE_NAME}"

#Help on load
#Load the contents of the specified workspace into the local filesystem. By default, the workspace is loaded into a subdirectory of the current working directory named the same as the provided workspace selector
#
#Usage: scm load [options] <ws-name> [remote-path...]
#  ws-name     - Workspace to load (name, alias, or UUID)
#  remote-path - List of remote items to load, may be a component (name, alias, or UUID), or a remote path within a component
#
#Options:
#  --all                      - Selects all components. Priority is given to explicitely selected components in the case of a conflict.
#  -d [--dir] arg             - Root directory to save files to.
#  -f [--force]               - Overwrite files that already exist in the filesystem.
#  -i [--include-root]        - Load component roots as directories in the filesystem.
#  -L [--local-rules] arg     - Local path to load rules. Must be specified with exactly one component.
#  -P [--password] arg        - Password for repository.
#  -q [--quiet]               - Print the minimum of output during normal operation.
#  -r [--repository-uri] arg  - URI specifying the location of repository.
#  -R [--remote-rules] arg    - Path to the load rules within a component. Must be specified with exactly one component.
#  -t [--target] arg          - Optional local path where changes should be loaded.
#  -u [--username] arg        - Username for repository.
