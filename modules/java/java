#!/bin/bash
# vim: set tabstop=2 shiftwidth=2 autoindent smartindent:

#------------------------------------------------------------------------------
# Copyright 2009 Lance W. Feagan
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License. 
#------------------------------------------------------------------------------

# Sun Java JDK/JRE

__java_dependencies=( "mbe" "platform" "utils" )
__java_functions=( "_java_load" "_java_unload" "_java_setpath" "_java_usage" "_java_listCreators" "_java_isValidCreator" "_java_listVersions" "_java_isValidVersion" "_java_env" "_java_buildjavahomestring" "_java_config" '_java_complete' )

export __java_javadir="Java"

_java_load ()
{
	# Load module dependencies
	_mbe_activateModules "${__java_dependencies[@]}"
	local module="java"
	# Load preferences
	source "${MODULES_DIR}/${module}/${module}.conf"
	export JAVA_BITS="${JAVA_BITS:-32}"
	return 0
}

_java_unload ()
{
	local module="java"
	local func
	for func in "${__java_functions[@]}"; do
		unset "${func}"
	done
	return 0
}

_java_setpath ()
{
	# Configure JAVA_HOME, PATH, MANPATH, LD_LIBRARY_PATH
	local module="java"
	JAVA_HOME=$(_java_buildjavahomestring ${JAVA_BITS} ${JAVA_CREATOR} ${JAVA_VERSION})

	if [ -e "${JAVA_HOME}" ]; then
		PATH="${JAVA_HOME}/bin:${PATH}"
		MANPATH="${JAVA_HOME}/man:$MANPATH"
		LD_LIBRARY_PATH="${JAVA_HOME}/lib:${LD_LIBRARY_PATH}"
		export JAVA_HOME
	fi
}

_java_usage ()
{
	local module="java"
}

_java_complete()
{
	COMPREPLY=( )

	if [ $COMP_CWORD -eq 2 ]; then
		opts="config env list"
		funcs="cd config env list"
		COMPREPLY=( $(compgen -W "${funcs}" -- ${cur}) )
		return 0
	fi

	case "${module_function}" in
		cd)
			COMPREPLY=( )
			return 0
			;;
		config)
			# when previous is the function, list the possible flags
			# when previous is a flag, generate possible flag arguments
			case "${prev}" in
				-b)
					local bits="32 64"
					COMPREPLY=( $(compgen -W "${bits}" -- ${cur})  )
					return 0
					;;
				-c)
					local creators="$(_java_listCreators)"
					COMPREPLY=( $(compgen -W "${creators}" -- ${cur})  )
					return 0
					;;
				-v)
					local versions="$(_java_listVersions)"
					COMPREPLY=( $(compgen -W "${versions}" -- ${cur})  )
					return 0
					;;
			config|*)
					# flags are: "-b -c -h -v "
					_mbe_functionFlags=( '-b' '-c' '-h' '-v' )
					local flags="$(_mbe_getRemainingConfigFlags)"
					COMPREPLY=( $(compgen -W "${flags}" -- ${cur})  )
					return 0
					;;
			esac
			;;
		env)
			_mbe_functionFlags=( '-i' '-h' '-p' )
			local flags="$(_mbe_getRemainingConfigFlags)"
			COMPREPLY=( $(compgen -W "${flags}" -- ${cur})  )
			return 0
			;;
		list)
			if [ "$prev" = "list" ]; then
				local list_opts="versions creators"
				COMPREPLY=( $(compgen -W "${list_opts}" -- ${cur})  )
				return 0
			else
				COMPREPLY=( )
			fi
			;;
		esac

	COMPREPLY=( )
	return 0
}

_java_cd ()
{
	cd "${JAVA_HOME}"
}

_java_buildjavahomestring ()
{
	# Takes three arguments, JAVA_BITS, JAVA_CREATOR, and JAVA_VERSION and
	# creates the string to be used for JAVA_HOME
	if [[ -n "${1}" && -n "${2}" && -n "${3}" ]]; then
		local bits="${1}"
		local creator="${2}"
		local version="${3}"
		local maybe_java_home
		if [[ "${bits}" == 32 ]]; then
			maybe_java_home="${TOOLSPATH32}"
		elif [[ "${bits}" == 64 ]]; then
			maybe_java_home="${TOOLSPATH}"
		else
			echo ""
			return 1
		fi
		_java_isValidCreator ${creator}
		if [[ "$?" == 1 ]]; then
			_java_isValidVersion ${creator} ${version}
			if [[ "$?" == 1 ]]; then
				maybe_java_home="${maybe_java_home}/${__java_javadir}/${creator}/${version}"
				if [[ -d "${maybe_java_home}" ]]; then
					echo "${maybe_java_home}"
				fi
			fi
		fi
	fi
	echo ""
	return 1
}

_java_config ()
{
	usage ()
	{
		echo "_java_config -c <Creator> -v <Version> -b <Bits>"
	}
	# Process arguments
	# -b Bits
	# -c Creator
	# -h Print usage
	# -n Do not call buildpath
	# -q Quiet; do not print any messages
	# -v Version
	# parse arguments with getopts
	# reset getopts state variables
	unset bits creator version
	print_usage=0
	suppress_buildpath=0
	quiet=0
	while getopts "b:c:hnqv:" option
	do
		case $option in
			b  ) bits=$OPTARG;;
		  c  ) creator=$OPTARG;;
			h  ) print_usage=1;;
			n  ) suppress_buildpath=1;;
			q  ) quiet=1;;
			v  ) version=$OPTARG;;
			\? ) print_usage="1";;
			*  ) print_usage="1";;
		esac
	done
	OPTIND=1 # Reset OPTIND

	if [[ "$print_usage" == 1 ]]; then
		usage
		return 0
	fi

	# If a field is unassigned, use the current value as the default (eg no change if unspecified)
	bits="${bits-$JAVA_BITS}"
	creator="${creator-$JAVA_CREATOR}"
	version="${version-$JAVA_VERSION}"

	# Verify that requested change will succeed
	local maybe_java_home="$(_java_buildjavahomestring ${bits} ${creator} ${version})"
	DEBUG echo "maybe_java_home=${maybe_java_home}"
	if [ -n "${maybe_java_home}" ]; then
		JAVA_BITS="${bits}"
		JAVA_CREATOR="${creator}"
		JAVA_VERSION="${version}"
		JAVA_HOME="${maybe_java_home}"
		export JAVA_BITS JAVA_CREATOR JAVA_VERSION JAVA_HOME

		# Export variables
		if [[ "${suppress_buildpath}" != "1" ]]; then
			_mbe_buildpath
		fi
	fi
}

_java_list()
{
	usage ()
	{
		echo "Usage: _java_list <creators|versions>"
	}

	case "$1" in
	creators)
		_java_listCreators
		;;
	versions)
		_java_listVersions $2
		;;
	*)
		echo "Unrecognized option"
		return 1
		;;
	esac
}

_java_listCreators ()
{
	usage ()
	{
		echo "Usage: _java_listCreators"
	}
	local searchpath
	if [[ "${JAVA_BITS}" == 32 ]]; then
		searchpath="${TOOLSPATH32}/${__java_javadir}"
	else
		searchpath="${TOOLSPATH}/${__java_javadir}"
	fi
	# FIXME: redirecting stderr to devnull should likely have an actual if statement to guard against
	local creators=( $(find_eregex "${searchpath}" -mindepth 1 -maxdepth 1 -regex '.*/*' 2>/dev/null | trimdirs | sort) )
	echo "${creators[*]}"
}

_java_isValidCreator ()
{
	usage ()
	{
		echo "Usage: _java_isValidCreator CREATOR"
	}
	local creators=( $(_java_listCreators) )
	for creator in "${creators[@]}"; do
		if [[ "${1}" == "${creator}" ]]; then
			return 1
		fi
	done
	return 0
}

_java_listVersions ()
{
	usage ()
	{
		echo "Usage: _java_listVersions CREATOR"
	}

	# Process arguments
	# First argument is the creator name
	local creator
	if [ -z "${1}" ]; then
		creator="${JAVA_CREATOR:-Sun}" # Default if creator is not set is IBM
	else
		creator="${1}"
	fi

	local searchpath
	if [[ "${JAVA_BITS}" == 32 ]]; then
		searchpath="${TOOLSPATH32}/${__java_javadir}/${creator}"
	else
		searchpath="${TOOLSPATH}/${__java_javadir}/${creator}"
	fi
	local versions=( $(find_eregex "${searchpath}" -maxdepth 1 -regex '.*/*[0-9].[0-9]*' 2>/dev/null | trimdirs | sort) )
	echo "${versions[*]}"
}

_java_isValidVersion ()
{
	usage ()
	{
		echo "Usage: _java_isValidVersion CREATOR VERSION"
	}
	# Process arguments
	# First argument is the creator name
	if [[ -n "${1}" && -n "${2}" ]]; then
		_java_isValidCreator ${1}
		if [[ "$?" == 1 ]]; then
			local versions=( $(_java_listVersions ${1}) )
			for version in "${versions[@]}"; do
				if [[ "${2}" == "${version}" ]]; then
					return 1
				fi
			done
			return 0
		fi
		return 0
	fi
	return 0
}

_java_env ()
{
	usage ()
	{
		echo "_java_env"
		echo " -i = print internal variable state"
		echo " -p = print PATH, LD_LIBRARY_PATH, and MANPATH"
		echo " -h = print usage"
	}
	# Process arguments
	# -i Internal variable state
	# -p PATH, LD_LIBRARY_PATH, and MANPATH
	# -h Print usage
	# parse arguments with getopts
	# reset getopts state variables
	print_internal=0
	print_path=0
	print_usage=0
	while getopts "iph" option
	do
		case $option in
			i  ) print_internal=1;;
		  p  ) print_path=1;;
			h  ) print_usage=1;;
			\? ) print_usage=1;;
			*  ) print_usage=1;;
		esac
	done
	OPTIND=1 # Reset OPTIND

	if [[ "$print_usage" == 1 ]]; then
		usage
		return 0
	fi

	echo "JAVA_HOME=${JAVA_HOME}"

	if	[[ "$print_internal" == 1 ]]; then
		echo "------------------------------------------------------------"
		echo "JAVA_CREATOR=${JAVA_CREATOR}"
		echo "JAVA_VERSION=${JAVA_VERSION}"
		echo "JAVA_BITS=${JAVA_BITS}"
	fi

	if	[[ "$print_path" == 1 ]]; then
		echo "------------------------------------------------------------"
		echo "PATH=${PATH}"
		echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"
		echo "MANPATH=${MANPATH}"
	fi
}
